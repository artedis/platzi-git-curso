Este es un documento de texto plano

primer archivo agregado al repositorio local

se ha realizado una nueva modificación al archivo texto

Se agrega un nuevo parrafo de
información

ls     -> lista  de archivos dentro de un directorio
ls -a  -> lista con archivos ocultos incluidos
ls -al -> lista con archivos ocultos incluidos y en formato lista

cat <archivo> -> Muestra el contenido del archivo
rm <archivo>  -> Elimina el archivo del directorio / ser precavido con lo que se elimina
pwd -> muestra la dirección actual de la consola
git init -> inicializa un repositorio vacio
touch <archivo> -> Crea un archivo nuevo vacio
git status -> muestra el estatus actual del repositorio
git add . -> agrega todos los cambios realizados a la memoria staying (memoria de uso de git)
git commit -> confirma los cambios/en caso de utilizar el comando sin -m "" para salir de la consola se debe pulsar esc + shift + ZZ
git log <archivo> -> muestra todos los commits realizados hasta el momento en ese archivo
git show <archivo> -> muestra a detalle los cambios realizados
git diff <id> <id>  -> permite ver las diferencias entre dos commits

git reset <id> --hard -> todo vuelve a la version anterior
git reset <id> --soft -> todo vuelve a la version anterior pero los cambios que se encuentran en staying permanecen en staying listos para el commit siguiente

git checkout <id> <archivo> -> permite cargar una versión anterior de un archivo
/en caso de descartar los cambios se utliza git checkout <branch> <archivo> para tomar la version que tiene esa rama

git log --oneline -> Te muestra el id commit y el título del commit.
git log --decorate -> Te muestra donde se encuentra el head point en el log.
git log --stat -> Explica el número de líneas que se cambiaron brevemente.
git log -p -> Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog -> Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate 
git log --pretty=format:"%cn hizo un commit %h el dia %cd" -> Muestra mensajes personalizados de los commits.
git log -3 -> Limitamos el número de commits.
git log --after=“2018-1-2” 
git log --after=“today” 
git log --after=“2018-1-2” --before=“today” -> Commits para localizar por fechas.
git log --author=“Name Author” -> Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” -> Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i -> Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html >- Busca los commits en un archivo en específico.
git log -S “Por contenido” -> Buscar los commits con el contenido dentro del archivo.
git log > log.txt -> guardar los logs en un archivo txt


